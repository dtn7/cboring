package cboring

import (
	"bytes"
	"reflect"
	"testing"
)

func TestByteString(t *testing.T) {
	tests := []struct {
		cbor []byte
		data []byte
	}{
		{[]byte{0x40}, []byte{}},
		{[]byte{0x44, 0x01, 0x02, 0x03, 0x04}, []byte{0x01, 0x02, 0x03, 0x04}},
		{[]byte{0x58, 0x1A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
			0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
			0xAA, 0xAA, 0xAA, 0xAA, 0xAA},
			[]byte{0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
				0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
				0xAA, 0xAA, 0xAA}},
	}

	for _, test := range tests {
		// Read
		buff := bytes.NewBuffer(test.cbor)
		if data, err := ReadByteString(buff); err != nil {
			t.Fatal(err)
		} else if !reflect.DeepEqual(data, test.data) {
			t.Fatalf("Deserialized data mismatches: %x != %x", data, test.data)
		}

		// Write
		buff.Reset()
		if err := WriteByteString(test.data, buff); err != nil {
			t.Fatal(err)
		}

		if bb := buff.Bytes(); !reflect.DeepEqual(bb, test.cbor) {
			t.Fatalf("Serialized data mismatches: %x != %x", bb, test.data)
		}
	}
}

func TestReadTextString(t *testing.T) {
	tests := []struct {
		cbor []byte
		data string
	}{
		{[]byte{0x60}, ""},
		{[]byte{0x61, 0x61}, "a"},
		{[]byte{0x64, 0x49, 0x45, 0x54, 0x46}, "IETF"},
		{[]byte{0x78, 0xE7, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70, 0x73,
			0x75, 0x6D, 0x20, 0x64, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74,
			0x20, 0x61, 0x6D, 0x65, 0x74, 0x2C, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x65,
			0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69,
			0x73, 0x63, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2C, 0x20,
			0x73, 0x65, 0x64, 0x20, 0x64, 0x6F, 0x20, 0x65, 0x69, 0x75, 0x73, 0x6D,
			0x6F, 0x64, 0x20, 0x74, 0x65, 0x6D, 0x70, 0x6F, 0x72, 0x20, 0x69, 0x6E,
			0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6E, 0x74, 0x20, 0x75, 0x74, 0x20,
			0x6C, 0x61, 0x62, 0x6F, 0x72, 0x65, 0x20, 0x65, 0x74, 0x20, 0x64, 0x6F,
			0x6C, 0x6F, 0x72, 0x65, 0x20, 0x6D, 0x61, 0x67, 0x6E, 0x61, 0x20, 0x61,
			0x6C, 0x69, 0x71, 0x75, 0x61, 0x2E, 0x20, 0x55, 0x74, 0x20, 0x65, 0x6E,
			0x69, 0x6D, 0x20, 0x61, 0x64, 0x20, 0x6D, 0x69, 0x6E, 0x69, 0x6D, 0x20,
			0x76, 0x65, 0x6E, 0x69, 0x61, 0x6D, 0x2C, 0x20, 0x71, 0x75, 0x69, 0x73,
			0x20, 0x6E, 0x6F, 0x73, 0x74, 0x72, 0x75, 0x64, 0x20, 0x65, 0x78, 0x65,
			0x72, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x75, 0x6C,
			0x6C, 0x61, 0x6D, 0x63, 0x6F, 0x20, 0x6C, 0x61, 0x62, 0x6F, 0x72, 0x69,
			0x73, 0x20, 0x6E, 0x69, 0x73, 0x69, 0x20, 0x75, 0x74, 0x20, 0x61, 0x6C,
			0x69, 0x71, 0x75, 0x69, 0x70, 0x20, 0x65, 0x78, 0x20, 0x65, 0x61, 0x20,
			0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x64, 0x6F, 0x20, 0x63, 0x6F, 0x6E, 0x73,
			0x65, 0x71, 0x75, 0x61, 0x74, 0x2E},
			"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmo" +
				"d tempor incididunt ut labore et dolore magna aliqua. Ut enim ad min" +
				"im veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip" +
				" ex ea commodo consequat."},
	}

	for _, test := range tests {
		// Read
		buff := bytes.NewBuffer(test.cbor)
		if data, err := ReadTextString(buff); err != nil {
			t.Fatal(err)
		} else if data != test.data {
			t.Fatalf("Deserialized data mismatches: %s != %s", data, test.data)
		}

		// Write
		buff.Reset()
		if err := WriteTextString(test.data, buff); err != nil {
			t.Fatal(err)
		}

		if bb := buff.Bytes(); !reflect.DeepEqual(bb, test.cbor) {
			t.Fatalf("Serialized data mismatches: %x != %x", bb, test.data)
		}
	}
}
